# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  userservice:
    image: ghcr.io/ponaik/fantastic-octo-guacamole:bd56028e3fff013bd3d807ad05933f389452ddec
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_SCHEMA}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASS}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
    ports:
      - 8080:8080
    depends_on:
      postgres:
         condition: service_healthy
      redis:
        condition: service_started

  postgres:
     image: postgres:18-alpine
     restart: always
     user: postgres
     volumes:
       - db-data:/var/lib/postgresql/data
     environment:
       - POSTGRES_DB=${DB_SCHEMA}
       - POSTGRES_USER=${DB_USER}
       - POSTGRES_PASSWORD=${DB_PASS}
     expose:
       - 5432
     healthcheck:
       test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_SCHEMA}"]
       interval: 10s
       timeout: 5s
       retries: 5

  redis:
    image: redis:8.2.2-alpine
    container_name: redis
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis-data:/data

volumes:
  db-data:
  redis-data: