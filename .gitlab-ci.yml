stages:
  - build
  - test
  - code_quality
  - package

# Shared cache for Maven
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .m2/repository
    - target/

variables:
  MAVEN_CLI_OPTS: "-B -V"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  # For Testcontainers to use the Docker-in-Docker service
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  # Docker image tag
  IMAGE_TAG: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

################################################################################
# Build (download dependencies and compile, produce package)
################################################################################
maven-build:
  stage: build
  image: maven:3.10.1-eclipse-temurin-21
  script:
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS dependency:go-offline
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS -DskipTests package
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 hour

################################################################################
# Tests (unit + integration). Testcontainers will start Postgres and Redis.
# Use docker:dind service and privileged so testcontainers can create containers.
################################################################################
maven-test:
  stage: test
  image: maven:3.10.1-eclipse-temurin-21
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    # disable TLS for dind (we use plain tcp)
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    # optionally reduce Testcontainers Ryuk issues
    TESTCONTAINERS_RYUK_DISABLED: "false"
  before_script:
    - docker info
  script:
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS test
  artifacts:
    when: always
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/surefire-reports/
      - target/failsafe-reports/
    expire_in: 1 hour
  allow_failure: false
  retry: 1
  tags: []

################################################################################
# SonarQube analysis (Maven sonar:sonar)
# Requires SONAR_TOKEN and SONAR_HOST_URL set in CI/CD variables
################################################################################
sonarqube:
  stage: code_quality
  image: maven:3.10.1-eclipse-temurin-21
  script:
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS verify sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST_URL
  only:
    - branches
  allow_failure: true
  artifacts:
    expire_in: 1 hour

################################################################################
# Package -> Build Docker image using your multi-stage Dockerfile
################################################################################
docker-build:
  stage: package
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t "$IMAGE_TAG" .
    - docker tag "$IMAGE_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - branches
  artifacts:
    expire_in: 1 hour

#################################################################################
## Release (optional) - example for only publishing on tags
#################################################################################
#docker-release:
#  stage: release
#  image: docker:24
#  services:
#    - name: docker:24-dind
#      alias: docker
#  variables:
#    DOCKER_HOST: "tcp://docker:2375"
#    DOCKER_TLS_CERTDIR: ""
#  before_script:
#    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
#  script:
#    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .
#    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
#  only:
#    - tags
#  when: on_success
