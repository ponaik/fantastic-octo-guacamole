name: CI - build and test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'maven'

      - name: Install mvnw executable
        run: chmod +x ./mvnw

      - name: Run Unit Tests
        run: ./mvnw -B test -Dgroups=unit

      - name: Run Integration Tests and SonarQubeScan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          ./mvnw -B verify -Dgroups=integration \
            sonar:sonar \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.organization=${SONAR_ORGANIZATION} \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.token=${SONAR_TOKEN}

      - name: Package application
        run: ./mvnw -B -DskipTests package

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: |
      needs.build-and-test.result == 'success' &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build-artifact

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          build-args: |
            JAR_FILE=build-artifact/*.jar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image name
        run: echo "IMAGE=ghcr.io/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_ENV